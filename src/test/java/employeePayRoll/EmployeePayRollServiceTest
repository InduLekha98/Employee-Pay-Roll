package com.employeepayRoll;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

public class EmployeePayRollServiceTest {

    @Test
    public void given3EmployeeWhenWrittenToFile_ShouldReturnEmployeeEntries(){
        EmployeePayRollData[] arrayOfEmps ={
            new EmployeePayRollData(101,"Indu",1100000.00),
            new EmployeePayRollData(202,"Lekha",2000000.00),
            new EmployeePayRollData(303,"Sandhya",3000000.00),
        };
        EmployeePayRollService employeePayRollService;
        employeePayRollService = new EmployeePayRollService(Arrays.asList(arrayOfEmps));
        employeePayRollService.writeData(EmployeePayRollService.IOService.FILE_IO);
        employeePayRollService.printData(EmployeePayRollService.IOService.FILE_IO);
        long entries = employeePayRollService.countEntries(EmployeePayRollService.IOService.FILE_IO);
        Assertions.assertEquals(3,entries);
    }

    @Test
    public void givenFileReadingFromFile_shouldMatchEmployeeCount(){
        EmployeePayRollService employeePayRollService = new EmployeePayRollService();
        long entries = employeePayRollService.readData(EmployeePayRollService.IOService.FILE_IO);
        Assertions.assertEquals(3,entries);
    }

    @Test
    void givenEmployeePayRollInDB_WhenRetrieved_ShouldMatchEmployeeCount() {
        EmployeePayRollService employeePayrollService = new EmployeePayRollService();
        List<EmployeePayRollData> employeePayrollData = employeePayrollService.readEmployeeData(EmployeePayRollService.IOService.DB_IO);
        Assertions.assertEquals(3, employeePayrollData.size());
    }

    @Test
    void givenNewSalaryForEmployee_whenUpdate_shouldSyncWithDB() {
        EmployeePayRollService employeePayrollService = new EmployeePayRollService();
        List<EmployeePayRollData> employeePayrollData = employeePayrollService.readEmployeeData(EmployeePayRollService.IOService.DB_IO);
        employeePayrollService.updateEmployeeSalary("TERISA", 30000000.00);
        boolean result = employeePayrollService.checkEmployeePayRollSyncWithDB("TERISA");
        Assertions.assertEquals(true, result);
    }

    @Test
    void givenDateRangeToEmployeePayRollInDB_WhenRetrieved_ShouldMatchFilteredEmployeeCount() {
        EmployeePayRollService employeePayrollService = new EmployeePayRollService();
        String date = "2013-01-10";
        String endDate= "2015-01-22";
        List<EmployeePayRollData> employeePayrollData = employeePayrollService.readFilteredEmpPayRollData(EmployeePayRollService.IOService.DB_IO,date,endDate);
        Assertions.assertEquals(4,employeePayrollData.size());
    }

    @Test
    void givenGenderToEmployeeRollDB_whenRetrievedSumOfSalary_shouldMatchExpectedSumOfSalary () {
        EmployeePayRollService employeePayRollService = new EmployeePayRollService();
        String gender = "male";
        double sumOfSalary = employeePayRollService.sumOfSalary(EmployeePayRollService.IOService.DB_IO,gender);
        double expectedSumOfSalary = 160000.00;
        Assertions.assertEquals(expectedSumOfSalary,sumOfSalary);
    }

    @Test
    void givenGenderToEmployeeRollDB_whenRetrievedAverage_shouldMatchExpectedAverageOfSalary () {
        EmployeePayRollService employeePayRollService = new EmployeePayRollService();
        String gender = "male";
        double avg = employeePayRollService.avgOfSalary(EmployeePayRollService.IOService.DB_IO,gender);
        double expectedAvgOfSalary = 160000.00;
        Assertions.assertEquals(expectedAvgOfSalary,avg);
    }

    @Test
    void givenGenderToEmployeeRollDB_whenRetrievedCount_shouldMatchExpectedCount () {
        EmployeePayRollService employeePayRollService = new EmployeePayRollService();
        String gender = "female";
        int count = employeePayRollService.countByGender(EmployeePayRollService.IOService.DB_IO,gender);
        int expectedCount = 3;
        Assertions.assertEquals(expectedCount,count);
    }

    @Test
    void givenNewEmployeeToEmployeeRollDB_whenAdded_shouldSyncWithDB () {
        EmployeePayRollService employeePayRollService = new EmployeePayRollService();
        employeePayRollService.readEmployeeData(EmployeePayRollService.IOService.DB_IO);
        employeePayRollService.addEmployee("Naina","female",2500000.00, LocalDate.now());
        boolean result = employeePayRollService.checkEmployeePayRollSyncWithDB("Naina");
        Assertions.assertTrue(result);
    }
}